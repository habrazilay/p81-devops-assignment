name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository to access the codebase
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Use Terragrunt Docker image with Terraform included
      - name: Use Terragrunt Docker container
        uses: docker://alpine/terragrunt:latest

      # Step 3: Set up AWS credentials for Terragrunt
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      # Step 4: Initialize Terragrunt to set up the working directory
      - name: Initialize Terragrunt
        run: terragrunt init
        working-directory: my_terragrunt

      # Step 5: Apply Terragrunt configurations to provision infrastructure
      - name: Apply Terragrunt
        run: terragrunt apply -auto-approve
        working-directory: my_terragrunt

  python:
    name: Deploy Application Code
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      # Step 1: Checkout the repository to access the codebase
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python environment using the latest stable version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install Python dependencies from the requirements file
      - name: Install dependencies
        run: pip install --no-cache-dir -r requirements.txt

      # Step 4: Execute the Python script to process JSON
      - name: Run the Python script
        run: python process_json.py
